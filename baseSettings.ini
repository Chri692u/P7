; Use the following syntax: Type:ValueName=Value
; Where Type can be either BOOL, INT, DOUBLE, STRING or PATH
; The Type can also be a comma seperated list of any of the above mentioned types in the format LIST<TYPE>, i.e. LIST<STRING>
; ValueName can be whaterver, but the Value have to match the type indicated.
; It is also possible to base a Settings file on another by the EXTERNAL type, e.g. "EXTERNAL:otherSettingsFile.ini"
; All values can from that settings file can then be overwritten in this new one.

; == General Settings ==
; downwardpath - The filepath to Fast Downward
PATH:downwardpath=../../P7Requirements/downward/fast-downward.py
; validatorpath - The filepath to VAL
PATH:validatorpath=../../P7Requirements/downward/VAL/validate
; startIncrement - The time limit (in seconds) for the initial increment
INT:startIncrement=3
; incrementModifier - By how much the previous increment time limit should be multiplied with
INT:incrementModifier=2
; Maximum time (in seconds) the execution of a reformulator can take in total
INT:totalTimeLimit=300
; timelimitSplit - How much time to reformulate compared to how long Fast Downward gets to run
;                  E.g. If the time for a increment is 10 sec and time limit split is 0.25, then the reformulator gets 5 sec to run while Fast Downward gets 15 sec to run
DOUBLE:timelimitSplit=0.50
; Reformulators
    ; sameoutput - Does nothing
    ; walker - Generates macros based on walks through the state space
        ; greedyWalker - The default walker
        ; greedyResumeWalker - The default walker, where each iteration resumes from best found state
        ; queueWalker - Expands the best state, as decided by heuristic, then generates a path for all possible states
LIST<STRING>:reformulator=greedyResumeWalker
BOOL:validate=true
; runDirect - Force our program to run in Direct mode instead of iteratively
LIST<BOOL>:runDirect=false

; == Walker Settings ==
; walkersHeuristic - Only relevant to the walker reformulator
    ; random - The walker choses actions at random
    ; goalCount - The walker choses actions that increase the number of goal facts in the state, otherwise random
    ; goalPredicateCount - The walker choses actions that increase the number of goal facts in the state, or facts relating to the goal, otherwise random
    ; greedyHeuristic - the walker choses the best looking choice at the current moment, using some other heuristic
STRING:walkerHeuristic=random
BOOL:printwalkersteps=false

; == Fast Downward Settings ==
; Search Algorithms
    ; astar        - A* Search
    ; eager        - Eager best-first Search
    ; eager_greedy - Greedy search (eager)
    ; eager_wastar - Eager weighted A*
    ; ehc          - Lazy enforced hill-climbing
    ; iterated     - Iterated Search
    ; lazy         - Lazy best-first search
    ; lazy_greedy  - Greedy search (lazy)
    ; lazy_wstar   - (weighted) A* search (lazy)
STRING:downwardsearch=lazy_greedy
; Heuristics
; Note: Not all algorithms work with all heuristics!
    ; add - Additive heuristic
    ; blind - Blind heuristic
    ; cea - Context-enhanced additive heuristic
    ; cegar - Additive CEGAR heuristic
    ; cg - Casual graph heuristic
    ; ff - FF heuristic
    ; hm - h^m heuristic
    ; hmax - Max heuristic
    ; lmcut - Landmark-cut heuristic
    ; merge_and_shrink - Merge-and-shrink heuristic
    ; operatorcounting - Operator-counting heuristic
    ; ipdb - Canonical PDB with hillclimbing algorithm
STRING:downwardheuristic=[ff(), cea()], [ff(), cea()]

; maxCandidates - A hard cutoff of how many candidates are allowed
INT:maxCandidates=25

; flawRatio - The ratio of how much we allow the entanglement condition to be violated (If 1 we allow the condition to be violated all the time)
DOUBLE:flawRatio=0.5

; macroFlawRatio - Ratio of dependency between actions in macros.
DOUBLE:macroFlawRatio=0.95

; == Misc Settings ==
; debugmode - Enable various debug info
BOOL:debugmode=false
