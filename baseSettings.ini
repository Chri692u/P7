; Use the following syntax: Type:ValueName=Value
; Where Type can be either BOOL, INT, DOUBLE, STRING or PATH
; The Type can also be a comma seperated list of any of the above mentioned types in the format LIST<TYPE>, i.e. LIST<STRING>
; ValueName can be whaterver, but the Value have to match the type indicated.
; It is also possible to base a Settings file on another by the EXTERNAL type, e.g. "EXTERNAL:otherSettingsFile.ini"
; All values can from that settings file can then be overwritten in this new one.

; == General Settings ==
PATH:downwardpath=../../P7Requirements/downward/fast-downward.py
PATH:validatorpath=../../P7Requirements/downward/VAL/validate
; startIncrement - The time limit (in seconds) for the initial increment
INT:startIncrement=1
; incrementModifier - By how much the previous increment time limit should be multiplied with
INT:incrementModifier=3
; Maximum time (in seconds) the execution of a reformulator can take in total
INT:totalTimeLimit=120
; Reformulators
    ; sameoutput - Does nothing
    ; walker - Generates macros based on walks through the state space
LIST<STRING>:reformulator=walker

; == Fast Downward Settings ==
; Search Algorithms
    ; astar        - A* Search
    ; eager        - Eager best-first Search
    ; eager_greedy - Greedy search (eager)
    ; eager_wastar - Eager weighted A*
    ; ehc          - Lazy enforced hill-climbing
    ; iterated     - Iterated Search
    ; lazy         - Lazy best-first search
    ; lazy_greedy  - Greedy search (lazy)
    ; lazy_wstar   - (weighted) A* search (lazy)
STRING:downwardsearch=lazy_greedy
; Heuristics
; Note: Not all algorithms work with all heuristics!
    ; add - Additive heuristic
    ; blind - Blind heuristic
    ; cea - Context-enhanced additive heuristic
    ; cegar - Additive CEGAR heuristic
    ; cg - Casual graph heuristic
    ; ff - FF heuristic
    ; hm - h^m heuristic
    ; hmax - Max heuristic
    ; lmcut - Landmark-cut heuristic
    ; merge_and_shrink - Merge-and-shrink heuristic
    ; operatorcounting - Operator-counting heuristic
    ; ipdb - Canonical PDB with hillclimbing algorithm
STRING:downwardheuristic=[ff(), cea()], [ff(), cea()]

; == Walker Settings ==
; Heuristics - Only relevant to the walker reformulator
    ; random - The walker choses actions at random
    ; goalCount - The walker choses actions that increase the number of goal facts in the state, otherwise random
    ; goalPredicateCount - The walker choses actions that increase the number of goal facts in the state, or facts relating to the goal, otherwise random
STRING:heuristic=goalPredicateCount
BOOL:printwalkersteps=false

; == Entanglement Finder Settings ==
INT:searchCeiling=-1
INT:searchFloor=3
INT:levelReductionFactor=2
; LevelReductionTypes - What type of level reduction should be used in the entanglement finder
    ; Division - Level = Level / levelReductionFactor
    ; Subtraction - Level = Level - levelReductionFactor
STRING:levelReductionTypes=Division

; == Entanglement Evaluator Settings ==
DOUBLE:minimumQualityPercent=0.50
INT:maxCandidates=100
; EntanglerLengthModifier - What modifier to give to the Quality of occurance length
    ; none - 1
    ; default - Length / MaxLength
    ; lengthBias - 1 / max(MaxLength - Length, 1)
STRING:entanglerLengthModifier=lengthBias
; EntanglerOccuranceModifier - What modifier to give the Quality of occurance count
    ; none - 1
    ; default - Occurance / MaxOccurance
    ; lowOccuranceBias - 1 / Occurance
STRING:entanglerOccuranceModifier=lowOccuranceBias
BOOL:printentanglersteps=false

; == Misc Settings ==
BOOL:debugmode=false
