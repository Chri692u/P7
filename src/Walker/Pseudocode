// PseudoCode
    // Action generation is split into 4 parts.
    // 1. Candidate Objects
    // 2. Candidate Pairs
    // 3. Permutation Generation
    // 4. Multifact Verification
    //
    // Candidate Objects
    // -----------------
    // Premise
        // For a given action find all objects for each parameter which fulfill all unary facts.
    // Algorithm
        // Input
            // The given action A, which includes: parameters P and preconditions Pre (Which includes what precondition index I it relates to)
            // The current state S, which includes: objects O and unary facts UF
        // Output 
            // A set of objects for each paramter p in P.
        // Procedure
            // Set CO = Empty list
            // For every parem in A
                // Set O = S.O
                // For every pre in A preconditions, where argument count == 1
                    // if pre value == true
                        // Set O = O intersect UF.(A.I)
                    // else 
                        // Set O = O - UF.(A.I)
                // Append O to CO
            // Return CO
    //
    // Candidate Pairs
    // -----------------
    // Premise
        // Given a list of candidate objects sets, generate valid pairings according to binary facts
        // I.e. these objects of parameter 1 are valid in combination with these of parameter 3
    // Algorithm
        // Input: 
            // Binary action preconditions Pre, i.e. preconditions of the action with only 2 arguments
            // The current state S,
            // Candidate objects CO
        // Output: A set of valid combinations for each pair of indexes
        // Procedure:
            // CM = Empty map from an index pair, to candidate pairs, e.g. (0, 1) -> ((0, 0), (0, 1), (0, 2))
            //                                                        i.e. For the given set of parameter indexes, these pairings of candidate objects are legal
            // For every pre in Pre
                // CP = Empty set
                // For every o1 in CO[pre[0]], i.e. get object o1 from candidate objects at the first argument of the precondition
                    // For every o2 in CO[pre[1]]
                        // if (S contains fact (o1, o2)) == pre value
                            // Add (o1, o2) to CP  
                // if CM[(pre[0], pre[1])] = Empty set
                    // CM[(pre[0], pre[1])] = CP
                // else, Note: This only happens if two preconditions have the same arguments, e.g. pre_1: ?x ?y, pre_2: ?x ?y
                    // CP intersect CM[(pre[0], pre[1])]
            // return CM
    //
    // Permutation Generation
    // -----------------
    // Premise
        // Take the candidate objects and pairs, ande generate all legal permutations
    // Algorithm
        // Input: Candidate objects CO, candidate pairs CP, permutation p (Starts off empty, but is filled through recursion), permutations P (Set of valid permutations, initially empty)
        // Output: It outputs through the parameter P
        // Procedure - Permute:
            // Set p = empty list, i.e. working permutation
            // for every object o in CO[p.length]
                // Append o to p
                // Set validPerm = true
                // for every i = 0 to p.length
                    // if CP contains (i, p.length) and cp[(i, p.length)] !contains (p[i], p[p.size])
                        // validPerm = false
                // if validPerm
                    // if p.size = CO.size
                        // P append p
                    // else
                        // Permute(CO, CP, p)
                // Pop o from p
    //
    // Multifact Verification
    // -----------------
    // Premise
    // Check whether a given permutation is valid
    // 
    // Algorithm
        // Input: Given a permutation p, a set of multi fact preconditions Pre, and a set of multi facts MF (Any predicate with over 2 arguments)
        // Output: true/false
        // Procedure:
            // for every pre in Pre
                // if MF !contains (p[pre[0]], p[pre[1]], ..., p[pre[Pre.count]])
                    // return false
            // return true